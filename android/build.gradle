import java.nio.file.Paths

buildscript {

  repositories {
    google()
    mavenCentral()

    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:4.2.1'
  }
}

apply plugin: 'com.android.library'

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def resolveReactNativeDirectory() {
  def reactNativeLocation = safeExtGet("REACT_NATIVE_NODE_MODULES_DIR", null)
  if (reactNativeLocation != null) {
    return file(reactNativeLocation)
  }

  // monorepo workaround
  // react-native can be hoisted or in project's own node_modules
  def reactNativeFromProjectNodeModules = file("${rootProject.projectDir}/../node_modules/react-native")
  if (reactNativeFromProjectNodeModules.exists()) {
    return reactNativeFromProjectNodeModules
  }

  def reactNativeFromNodeModulesWithReanimated = file("${projectDir}/../../react-native")
  if (reactNativeFromNodeModulesWithReanimated.exists()) {
    return reactNativeFromNodeModulesWithReanimated
  }

  throw new Exception(
    "[react-native-keys] Unable to resolve react-native location in " +
      "node_modules. You should add project extension property (in app/build.gradle) " +
      "`REACT_NATIVE_NODE_MODULES_DIR` with path to react-native."
  )
}

def REACT_NATIVE_DIR = resolveReactNativeDirectory()

def reactProperties = new Properties()
file("$REACT_NATIVE_DIR/ReactAndroid/gradle.properties").withInputStream { reactProperties.load(it) }

def REACT_NATIVE_VERSION = reactProperties.getProperty("VERSION_NAME")
def REACT_NATIVE_MINOR_VERSION = REACT_NATIVE_VERSION.startsWith("0.0.0-") ? 1000 : REACT_NATIVE_VERSION.split("\\.")[1].toInteger()


def getExtOrDefault(name, defaultValue) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : defaultValue
}

def found = false
def basePath = projectDir.toPath().normalize()

// Find node_modules inside the example project
def nodeModulesDir = Paths.get(basePath.getParent().toString(), "example/node_modules")
def reactNativeDir = Paths.get(nodeModulesDir.toString(), "react-native/android")
if (nodeModulesDir.toFile().exists() && reactNativeDir.toFile().exists()) {
  found = true
}

if(!found){
  // Node's module resolution algorithm searches up to the root directory,
  // after which the base path will be null
  while (basePath) {
    nodeModulesDir = Paths.get(basePath.toString(), "node_modules")
    reactNativeDir = Paths.get(nodeModulesDir.toString(), "react-native/android")
    if (nodeModulesDir.toFile().exists() && reactNativeDir.toFile().exists()) {
      found = true
      break;
    }
    basePath = basePath.getParent()
  }
}

if(!found) {
  throw new GradleException(
    "${project.name}: unable to locate React Native android sources. " +
      "Ensure you have you installed React Native as a dependency in your project and try again.")
}

def nodeModulesPath = nodeModulesDir.toString().replace("\\", "/")
def reactNativePath = reactNativeDir.toString().replace("\\", "/")


android {
  compileSdkVersion getExtOrDefault('compileSdkVersion', 28)

  buildFeatures {
    prefab true
  }

  defaultConfig {
    minSdkVersion getExtOrDefault('minSdkVersion', 16)
    targetSdkVersion getExtOrDefault('targetSdkVersion', 28)

    externalNativeBuild {
      cmake {
        cppFlags "-fexceptions", "-frtti", "-std=c++1y", "-DONANDROID"
        abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        arguments '-DANDROID_STL=c++_shared',
          "-DNODE_MODULES_DIR=${nodeModulesPath}",
          "-DREACT_NATIVE_MINOR_VERSION=${REACT_NATIVE_MINOR_VERSION}"
      }
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  lintOptions{
    abortOnError false
    disable 'GradleCompatible'
  }

  externalNativeBuild {
    cmake {
      path "./CMakeLists.txt"
    }
  }

  packagingOptions {
    excludes = ['**/libc++_shared.so',
                '**/libfbjni.so',
                '**/libreactnativejni.so',
                '**/libjsi.so',
                '**/libreact_nativemodule_core.so',
                '**/libturbomodulejsijni.so'
    ]
  }

}

repositories {
  mavenCentral()
  mavenLocal()
  google()

  maven {
    url reactNativePath
    name 'React Native sources'
  }
}

dependencies {
  //noinspection GradleDynamicVersion
  if (REACT_NATIVE_MINOR_VERSION >= 71) {
    implementation "com.facebook.react:react-android:"
    implementation "com.facebook.react:hermes-android:"
  }
  else
  {
    implementation 'com.facebook.react:react-native:+'
  }
  implementation 'com.android.ndk.thirdparty:openssl:1.1.1l-beta-1'
}
