#!/usr/bin/env groovy
import java.util.regex.Matcher
import java.util.regex.Pattern


def getCurrentFlavor() {
  Gradle gradle = getGradle()

  // match optional modules followed by the task
  // (?:.*:)* is a non-capturing group to skip any :foo:bar: if they exist
  // *[a-z]+([A-Za-z]+) will capture the flavor part of the task name onward (e.g., assembleRelease --> Release)
  def pattern = Pattern.compile("(?:.*:)*[a-z]+([A-Z][A-Za-z0-9]+)")
  def flavor = ""

  gradle.getStartParameter().getTaskNames().any { name ->
    Matcher matcher = pattern.matcher(name)
    if (matcher.find()) {
      flavor = matcher.group(1).toLowerCase()
      return true
    }
  }

  return flavor
}

task callCL(type: Exec) {
  def flavor = getCurrentFlavor()
  def jniFile = "jnikeys.json"
  def exportCommand="";
  if (System.env['JNIFILE']) {
    jniFile = System.env['JNIFILE']
    exportCommand="export JNIFILE="+jniFile+" && ";
  }
  else if (project.hasProperty("jniConfigFiles")) {
    project.ext.jniConfigFiles.any { pair ->
      if (flavor.startsWith(pair.key.toLowerCase())) {
        jniFile = pair.value
        exportCommand="export JNIFILE="+jniFile+" && ";
        return true
      }
    }
  }
  if(project.ext.IS_EXAMPLE)
  {
    exportCommand=exportCommand+"export IS_EXAMPLE='TRUE' && ../../jniAndroid.js"
  }
  else
  {
    exportCommand=exportCommand+" ../node_modules/react-native-keys/jniAndroid.js"
  }
  def proc =["/bin/sh", "-c", exportCommand].execute()
  proc.consumeProcessOutput(System.out, System.err)

  ////
  def keys = [:]
  File f = new File("$project.rootDir/../$jniFile");
  if (!f.exists()) {
    f = new File("$envFile");
  }

  if (f.exists()) {
    def parsedJson = new groovy.json.JsonSlurper().parseText(f.text)
    println(parsedJson.public)
    parsedJson.public.each { key, value ->
      keys.put(key, value.replace('"', '\\"'))
    }
  } else {
    println("**************************")
    println("*** Missing KEYs file ****")
    println("**************************")
  }

  project.ext.set("keys", keys)
}

android {
  defaultConfig {
    project.keys.each { k, v ->
      def escaped = v.replaceAll("%","\\\\u0025")
      buildConfigField "String", k, "\"$v\""
      resValue "string", k, "\"$escaped\""
    }
  }
}

// this is remaining
tasks.whenTaskAdded { task ->
  if (project.hasProperty("jniConfigFiles")) {
    project.envConfigFiles.each { envConfigName, envConfigFile ->
      if (task.name.toLowerCase() == "generate"+envConfigName+"buildconfig") {
        task.doFirst() {
          android.applicationVariants.all { variant ->
            def variantConfigString = variant.getName()
            if (envConfigName.contains(variantConfigString.toLowerCase())) {
              loadDotEnv(envConfigName)
              project.env.each { k, v ->
                def escaped = v.replaceAll("%","\\\\u0025")
                variant.buildConfigField "String", k, "\"$v\""
                variant.resValue "string", k, "\"$escaped\""
              }
            }
          }
        }
      }
    }
  }
}

